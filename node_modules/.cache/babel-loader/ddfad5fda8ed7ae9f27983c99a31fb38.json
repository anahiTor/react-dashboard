{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/user/Desktop/untitled folder/src/components/Input.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nexport const Input = ({\n  type,\n  title,\n  rule,\n  regex,\n  changeValue,\n  setValidation\n}) => {\n  _s();\n\n  const [classes, setClass] = useState('i-mute name-input');\n  const [isValid, setValid] = useState(true);\n\n  const handleInput = e => {\n    if (e.target.value.trim().length && e.target.value.match(regex)) {\n      setClass(`i-mute name-input has-value`);\n      setValidation(true);\n      setValid(true);\n      changeValue(e.target.value);\n    } else if (!e.target.value.trim().length) {\n      setClass(`i-mute name-input`);\n      setValidation(false);\n      setValid(true);\n    } else {\n      setClass(`i-mute name-input errInput has-value`);\n      setValidation(false);\n      setValid(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"custom-input-block\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: type,\n        onChange: handleInput,\n        className: classes,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: isValid ? \"i-mute-lab\" : \"i-mute-lab errLabel\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: isValid ? 'hideErr' : 'showErr',\n      children: rule\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"gh2ea7fuokU32ejgpgVU9vxv2OA=\");\n\n_c = Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Users/user/Desktop/untitled folder/src/components/Input.jsx"],"names":["React","useState","Input","type","title","rule","regex","changeValue","setValidation","classes","setClass","isValid","setValid","handleInput","e","target","value","trim","length","match"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAGA,OAAO,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,IAAf;AAAqBC,EAAAA,KAArB;AAA4BC,EAAAA,WAA5B;AAAyCC,EAAAA;AAAzC,CAAD,KAA8D;AAAA;;AACjF,QAAM,CAACC,OAAD,EAAUC,QAAV,IAAsBT,QAAQ,CAAC,mBAAD,CAApC;AACA,QAAK,CAACU,OAAD,EAAUC,QAAV,IAAsBX,QAAQ,CAAC,IAAD,CAAnC;;AACA,QAAMY,WAAW,GAAIC,CAAD,IAAO;AACzB,QAAIA,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,IAAf,GAAsBC,MAAtB,IAAgCJ,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeG,KAAf,CAAqBb,KAArB,CAApC,EAAiE;AAC/DI,MAAAA,QAAQ,CAAE,6BAAF,CAAR;AACAF,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAI,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAL,MAAAA,WAAW,CAACO,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACD,KALD,MAKO,IAAI,CAACF,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,IAAf,GAAsBC,MAA3B,EAAmC;AACxCR,MAAAA,QAAQ,CAAE,mBAAF,CAAR;AACAF,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAI,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAJM,MAIA;AACLF,MAAAA,QAAQ,CAAE,sCAAF,CAAR;AACAF,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAI,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD;AACF,GAfD;;AAgBA,sBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,4BACE;AAAA,8BACE;AAAO,QAAA,IAAI,EAAET,IAAb;AAAmB,QAAA,QAAQ,EAAEU,WAA7B;AAA0C,QAAA,SAAS,EAAEJ,OAArD;AAA8D,QAAA,YAAY,EAAC;AAA3E;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,SAAS,EAAEE,OAAO,GAAG,YAAH,GAAkB,qBAA1C;AAAA,kBAAkEP;AAAlE;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAK,MAAA,SAAS,EAAEO,OAAO,GAAG,SAAH,GAAe,SAAtC;AAAA,gBAAkDN;AAAlD;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CA5BM;;GAAMH,K;;KAAAA,K","sourcesContent":["import React from 'react';\nimport { useState } from 'react'\n\n\nexport const Input = ({ type, title, rule, regex, changeValue, setValidation }) => {\n  const [classes, setClass] = useState('i-mute name-input');\n  const[isValid, setValid] = useState(true)\n  const handleInput = (e) => {\n    if (e.target.value.trim().length && e.target.value.match(regex)) {\n      setClass(`i-mute name-input has-value`);\n      setValidation(true)\n      setValid(true)\n      changeValue(e.target.value)\n    } else if (!e.target.value.trim().length) {\n      setClass(`i-mute name-input`);\n      setValidation(false)\n      setValid(true)\n    } else {\n      setClass(`i-mute name-input errInput has-value`);\n      setValidation(false)\n      setValid(false)\n    }\n  }\n  return (\n    <div className=\"custom-input-block\">\n      <label>\n        <input type={type} onChange={handleInput} className={classes} autoComplete='off' />\n        <span className={isValid ? \"i-mute-lab\" : \"i-mute-lab errLabel\"}>{title}</span>\n      </label>\n      <div className={isValid ? 'hideErr' : 'showErr'}>{rule}</div>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}